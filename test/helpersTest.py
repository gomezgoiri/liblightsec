'''
Created on 26/08/2014

@author: Aitor Gomez Goiri
'''

import unittest
from random import randint
from Crypto.Hash.SHA256 import SHA256Hash
from lightsec.helpers import BaseStationHelper, SensorHelper
from lightsec.tools.key_derivation import KeyDerivationFunctionFactory, Nist800
from lightsec.tools.encryption import AESCTRCipher


class HelpersTest(unittest.TestCase):
    
    def setUp(self):
        self.kdf_factory = KeyDerivationFunctionFactory( Nist800, SHA256Hash(), 256 ) # 512 ) 
        self.base_station = BaseStationHelper( self.kdf_factory )
        self.base_station.install_secret("sensor1", "authms1", "encms1")
    
    def test_encryption(self):
        stuff = self.base_station.create_keys( "user1", "sensor1", 10 )
        self.sensor = SensorHelper( self.kdf_factory,
                                    AESCTRCipher, "authms1", "encms1" )
        
        ctr = randint(0,500) # initial_value should change
        kenc, kauth = self.sensor.create_keys( "user1", stuff["a"], stuff["init_time"], stuff["exp_time"], ctr )
        
        # test that same keys are generated by the base station and the sensor
        self.assertSequenceEqual( kenc, stuff["kenc"] )
        self.assertSequenceEqual( kauth, stuff["kauth"] )
        
        self.user_cipher = AESCTRCipher(ctr, stuff["kenc"])
        ciphertext = self.user_cipher.encrypt("test")
        
        self.sensor_cipher = AESCTRCipher(ctr, kenc)
        deciphertext = self.sensor_cipher.encrypt(ciphertext)
        
        # test that Sensors understands the first message sent by the user
        self.assertSequenceEqual(deciphertext, "test")
        


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()